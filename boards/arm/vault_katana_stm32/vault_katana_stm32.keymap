#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define APT 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4

// &lt {
//     quick_tap_ms = <170>;
// };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_sch: macro_sch {
            label = "Macro_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
		    &macro_tap &kp S
		    &macro_release &kp RSHIFT
		    &macro_tap &kp C &kp H
	    >;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <25>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

//   00  01  02  03  04  05  06  07  08  09
//  10  11  12  13  14    15  16  17  18  19
// 20  21  22  23  24  25  26  27  28  29  30
//--------------------------------------------
//   00   w   f   p   b   j   l   u   y  09
//   r   s   t   h   k     x   n   a   i   o
// 20   c   g   d  SPC 25   e   m   ,   .   /

/ {
    combos {
        compatible = "zmk,combos";
/* usually on base layer */
        COMBO(q, &kp Q, 2 3)
        COMBO(z, &kp Z, 23 24)
        COMBO(v, &kp V, 1 2)
        //COMBO(_ae, &kp RA(A), 17 26)
        //COMBO(_oe, &kp RA(O), 19 26)
        //COMBO(_ue, &kp RA(U), 7 26)
        //COMBO(_sz, &kp RA(S), 11 24)
        //COMBO(sch, &macro_sch, 1 3)
        COMBO(slash, &kp SLASH, 30 31)
        COMBO(dash, &kp MINUS, 29 30)
        COMBO(enter, &kp ENTER, 19 29)
        COMBO(esc, &kp ESC, 24 25)
/* parentheticals */
        COMBO(lbrc, &kp LBRC, 1 12)
        COMBO(lbkt, &kp LBKT, 2 13)
        COMBO(lpar, &kp LPAR, 3 14)
        COMBO(lt, &kp LT, 4 15)
        COMBO(gt, &kp GT, 6 17)
        COMBO(rpar, &kp RPAR, 7 18)
        COMBO(rbkt, &kp RBKT, 8 19)
        COMBO(rbrc, &kp RBRC, 9 20)
/* caps */
        COMBO(caps, &caps_word, 14 18)
        COMBO(capslock, &kp CAPSLOCK, 1 9)
/* deletion */
        COMBO(bspc, &kp BSPC, 13 14)
        COMBO(del, &kp DEL, 8 9)
        COMBO(delword, &kp LC(BSPC), 18 19)
/* alternative shifting */
        /*
        COMBO(Sq, &kp LS(Q), 1 2 25)
        COMBO(Sz, &kp LS(Z), 18 19 25)
        COMBO(Sv, &kp LS(V), 0 1 25)
        COMBO(Sw, &kp LS(W), 0 25)
        COMBO(Sf, &kp LS(F), 1 25)
        COMBO(Sp, &kp LS(P), 2 25)
        COMBO(Sb, &kp LS(B), 3 25)
        COMBO(Sj, &kp LS(J), 4 26)
        COMBO(Sl, &kp LS(L), 5 26)
        COMBO(Su, &kp LS(U), 6 26)
        COMBO(Sy, &kp LS(Y), 7 26)
        COMBO(Sr, &kp LS(R), 8 25)
        COMBO(Ss, &kp LS(S), 9 25)
        COMBO(St, &kp LS(T), 10 25)
        COMBO(Sh, &kp LS(H), 11 25)
        COMBO(Sk, &kp LS(K), 12 25)
        COMBO(Sx, &kp LS(X), 13 26)
        COMBO(Sn, &kp LS(N), 14 26)
        COMBO(Sa, &kp LS(A), 15 26)
        COMBO(Si, &kp LS(I), 16 26)
        COMBO(So, &kp LS(O), 17 26)
        COMBO(Sc, &kp LS(C), 18 25)
        COMBO(Sg, &kp LS(G), 19 25)
        COMBO(Sd, &kp LS(D), 20 25)
        COMBO(Sm, &kp LS(M), 21 26)
        COMBO(Scomma, &kp SEMI, 22 26)
        COMBO(Sdot, &kp COLON, 23 26)
        COMBO(Se, &kp LS(E), 14 15 26)
        //*/
    };
};

//   00  01  02  03  04  06  07  08  09  10
//  11  12  13  14  15    17  18  19  20  21
// 22  23  24  25  26  27  28  29  30  31  32
// 33          34 35 36 37                 38


/ {

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 10 17 18 19 20 21 27 28 29 30 31 32 36 37>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
  bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 15 22 23 24 25 26 34>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo &kp>, <&kp>;
            // non-thumb keys
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

//   00  01  02  03  04  06  07  08  09  10
//  11  12  13  14  15    17  18  19  20  21
// 22  23  24  25  26  27  28  29  30  31  32
// 33              34 35 36 37             38

/ {

    keymap {
        compatible = "zmk,keymap";

        aptmak {
            label = "APT";

            bindings = <
                &kp V        &kp W        &kp F        &kp P        &none         &none        &none        &kp L        &kp U        &kp Y        &kp Q
                &hl LGUI R  &hl LALT S  &hl LCTRL T   &hl LSHFT H    &kp B      &none     &kp J   &hr RSHFT N  &hr RCTRL A   &hr LALT I   &hr RGUI O
                &hl LGUI R &kp C          &kp G          &kp D          &hl RALT K &kp C_MUTE     &hr RALT X   &kp M          &comsem        &dotcol        &hr RGUI O
		&kp F14					&my_lt NUM SQT  &my_lt NAV SPC &my_lt SYM E &my_lt FUN TAB					&kp ESC
            >;
        };
        numbers {
            label = "NUM";

            bindings = <
                &none          &kp N6         &kp N5         &kp N4         &kp ASTERISK       &none      &kp PLUS       &kp N7         &kp N8         &kp N9         &kp DOT
                &hl LCTRL N0   &hl LALT N3    &hl LGUI N2    &hl LSHFT N1   &hl RALT SLASH     &none      &kp MINUS      &kp N4         &kp N5         &kp N6         &kp DOT
                &trans         &kp N9         &kp N8         &kp N7         &trans         &kp E          &kp N0         &kp N1         &kp N2         &kp N3         &kp E
		&none 											&none &none &none &kp N0					&none
            >;
        };
        navigation {
            label = "NAV";

            bindings = <
                &none          &kp INSERT     &kp UP         &kp BSPC        &kp C_VOL_UP       &none     &kp C_VOL_UP   &kp BSPC       &kp DEL        &kp INSERT     &kp RIGHT
                &kp LCTRL      &hl LALT LEFT  &hl LGUI DOWN  &hl LSHFT RIGHT &kp C_VOL_DN       &none     &kp C_MUTE     &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT
                &trans         &kp HOME       &kp PG_DN      &kp END         &trans       &trans          &trans         &kp HOME       &kp PG_UP      &kp END        &trans
		&none &none &none &none &none &none
            >;
        };
        symbols {
            label = "SYM";

            bindings = <
                &trans         &kp GRAVE      &kp DQT        &kp RA(LS(SEMI)) &trans         &none        &trans         &kp BACKSLASH  &kp PIPE       &kp LT         &kp CARET
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR      &trans          &none        &trans         &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &kp CARET
                &trans         &kp TILDE      &kp SQT        &kp UNDERSCORE  &trans       &trans          &trans         &kp MINUS      &kp PLUS       &kp EQUAL      &none
		&none &none &none &none &none &none
            >;
        };
        function {
            label = "FUN";

            bindings = <
                &bootloader      &bootloader    &trans         &trans          &trans        &none         &kp F12        &kp F7         &kp F8         &kp F9         &none
                &sys_reset          &kp F12        &kp F11        &kp F10         &trans        &none         &kp F11        &kp F4         &kp F5         &kp F6         &kp F10
                &none          &kp F9         &kp F8         &kp F7          &trans        &trans        &trans         &kp F1         &kp F2         &kp F3         &none
		&none &none &none &none &none &none
            >;
        };

    };
};
